!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["use-x-table"]=t():e["use-x-table"]=t()}(self,(()=>(()=>{"use strict";var e,t={26:(e,t,n)=>{n.r(t);var r=n(294),o=n(935),u={page:1,pageSize:20,total:0},a=function(){return a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a.apply(this,arguments)},i=function(e,t,n,r){return new(n||(n=Promise))((function(o,u){function a(e){try{l(r.next(e))}catch(e){u(e)}}function i(e){try{l(r.throw(e))}catch(e){u(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,i)}l((r=r.apply(e,t||[])).next())}))},l=function(e,t){var n,r,o,u,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function i(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u&&(u=0,i[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}};function c(e,t){var n=this,o=function(e){var t,n,r;return e?{isMount:null!==(t=null==e?void 0:e.isMount)&&void 0!==t&&t,fInstance:null!==(n=null==e?void 0:e.fInstance)&&void 0!==n?n:null,pagination:null!==(r=e.pagination)&&void 0!==r?r:null}:{isMount:!1,fInstance:null,pagination:null}}(t),c=o.isMount,s=o.fInstance,f=o.pagination,p=(0,r.useState)([]),h=p[0],d=p[1],v=(0,r.useState)(!1),b=v[0],g=v[1],y=(0,r.useRef)({}),w=(0,r.useState)(a(a({},u),f)),S=w[0],m=w[1],x=function(t){return i(n,void 0,void 0,(function(){var n,r;return l(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),g(!0),n=function(e){var t=this,n={data:[],total:0};return function(r){return o=t,u=void 0,i=function(){var t,o,u,a;return function(e,t){var n,r,o,u,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function i(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u&&(u=0,i[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}}(this,(function(i){switch(i.label){case 0:i.label=1;case 1:return i.trys.push([1,3,,4]),[4,e(r||{})];case 2:return t=i.sent(),console.log(t,"data"),[2,{data:null!==(u=null==t?void 0:t.list)&&void 0!==u?u:[],total:null!==(a=null==t?void 0:t.total)&&void 0!==a?a:0}];case 3:return o=i.sent(),console.log(o,"e"),[2,n];case 4:return[2]}}))},new((a=void 0)||(a=Promise))((function(e,t){function n(e){try{l(i.next(e))}catch(e){t(e)}}function r(e){try{l(i.throw(e))}catch(e){t(e)}}function l(t){var o;t.done?e(t.value):(o=t.value,o instanceof a?o:new a((function(e){e(o)}))).then(n,r)}l((i=i.apply(o,u||[])).next())}));var o,u,a,i}}(e),[4,n(t||{})];case 1:return r=o.sent(),d(r.data),m((function(e){return a(a({},e),{total:r.total})})),g(!1),[3,3];case 2:return o.sent(),d([]),g(!1),[3,3];case 3:return[2]}}))}))};(0,r.useEffect)((function(){c&&x(S)}),[]);var O=function(e,t){return i(n,void 0,void 0,(function(){return l(this,(function(n){switch(n.label){case 0:return m((function(n){return a(a({},n),{page:e,pageSize:t})})),[4,x(a({page:e,pageSize:t},y.current))];case 1:return n.sent(),[2]}}))}))},k=function(e,t){return i(n,void 0,void 0,(function(){return l(this,(function(e){switch(e.label){case 0:return m((function(e){return a(a({},e),{page:1,pageSize:t})})),[4,x(a({page:1,pageSize:t},y.current))];case 1:return e.sent(),[2]}}))}))},z=(0,r.useMemo)((function(){return{current:S.page,defaultPageSize:u.pageSize,total:S.total,showTotal:function(){return"共".concat(S.total,"条")},pageSizeOptions:[10,20,50,100],showQuickJumper:!0,showSizeChanger:!0,onChange:O,onShowSizeChange:k}}),[S]);return{data:h,loading:b,pagination:z,submit:function(e){return i(n,void 0,void 0,(function(){return l(this,(function(t){switch(t.label){case 0:return y.current=(null==s?void 0:s.getFieldsValue)?s.getFieldsValue():e||{},m((function(e){return a(a({},e),{page:1})})),[4,x(a(a({},y.current),{page:1,pageSize:S.pageSize}))];case 1:return t.sent(),[2]}}))}))},keepSearchParamsSubmit:function(){return i(n,void 0,void 0,(function(){return l(this,(function(e){switch(e.label){case 0:return[4,x(a(a({},y.current),{page:z.current,pageSize:S.pageSize}))];case 1:return e.sent(),[2]}}))}))},reset:function(){return i(n,void 0,void 0,(function(){return l(this,(function(e){switch(e.label){case 0:return y.current={},m((function(e){return a(a({},e),{page:1})})),s&&s.resetFields(),[4,x(a({},u))];case 1:return e.sent(),[2]}}))}))},onChange:O,onShowSizeChange:k}}o.render(r.createElement((function(){var e=c((function(){return Promise.resolve({list:[1,2,3],total:0})})),t=e.data,n=e.submit;return console.log(t),(0,r.useEffect)((function(){n()}),[]),r.createElement("div",null,"test")}),null),document.getElementById("root"))}},n={};function r(e){var o=n[e];if(void 0!==o)return o.exports;var u=n[e]={exports:{}};return t[e](u,u.exports,r),u.exports}r.m=t,e=[],r.O=(t,n,o,u)=>{if(!n){var a=1/0;for(s=0;s<e.length;s++){for(var[n,o,u]=e[s],i=!0,l=0;l<n.length;l++)(!1&u||a>=u)&&Object.keys(r.O).every((e=>r.O[e](n[l])))?n.splice(l--,1):(i=!1,u<a&&(a=u));if(i){e.splice(s--,1);var c=o();void 0!==c&&(t=c)}}return t}u=u||0;for(var s=e.length;s>0&&e[s-1][2]>u;s--)e[s]=e[s-1];e[s]=[n,o,u]},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={826:0};r.O.j=t=>0===e[t];var t=(t,n)=>{var o,u,[a,i,l]=n,c=0;if(a.some((t=>0!==e[t]))){for(o in i)r.o(i,o)&&(r.m[o]=i[o]);if(l)var s=l(r)}for(t&&t(n);c<a.length;c++)u=a[c],r.o(e,u)&&e[u]&&e[u][0](),e[u]=0;return r.O(s)},n=self.webpackChunkuse_x_table=self.webpackChunkuse_x_table||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var o=r.O(void 0,[284],(()=>r(26)));return r.O(o)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,